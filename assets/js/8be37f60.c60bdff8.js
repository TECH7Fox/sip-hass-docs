"use strict";(self.webpackChunksip_hass_docs=self.webpackChunksip_hass_docs||[]).push([[4940],{1430:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>r,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"integration/guides/text-to-speech","title":"Text-to-Speech","description":"In this guide, I will show you how to setup a service call that can call a SIP endpoint, say something and hangup.","source":"@site/docs/integration/guides/text-to-speech.md","sourceDirName":"integration/guides","slug":"/integration/guides/text-to-speech","permalink":"/sip-hass-docs/docs/integration/guides/text-to-speech","draft":false,"unlisted":false,"editUrl":"https://github.com/TECH7Fox/sip-hass-docs/edit/main/docs/integration/guides/text-to-speech.md","tags":[{"inline":true,"label":"TTS","permalink":"/sip-hass-docs/docs/tags/tts"},{"inline":true,"label":"Google","permalink":"/sip-hass-docs/docs/tags/google"},{"inline":true,"label":"Send Action Service","permalink":"/sip-hass-docs/docs/tags/send-action-service"}],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1,"title":"Text-to-Speech","tags":["TTS","Google","Send Action Service"]},"sidebar":"integrationSidebar","previous":{"title":"Guides","permalink":"/sip-hass-docs/docs/integration/guides"},"next":{"title":"Services","permalink":"/sip-hass-docs/docs/integration/services"}}');var s=n(4848),a=n(8453);const o={sidebar_position:1,title:"Text-to-Speech",tags:["TTS","Google","Send Action Service"]},l=void 0,r={},c=[{value:"Requirements",id:"requirements",level:2},{value:"Dialplan",id:"dialplan",level:2},{value:"Service",id:"service",level:2}];function d(e){const t={code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.p,{children:"In this guide, I will show you how to setup a service call that can call a SIP endpoint, say something and hangup."}),"\n",(0,s.jsx)(t.h2,{id:"requirements",children:"Requirements"}),"\n",(0,s.jsx)(t.p,{children:"For this guide you will need the following:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["Googletts","\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"Preinstalled in the add-on"}),"\n",(0,s.jsxs)(t.li,{children:["If your not using the add-on, you can install it ",(0,s.jsx)("a",{href:"https://zaf.github.io/asterisk-googletts",children:"here"}),"."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(t.li,{children:"Asterisk integration installed"}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"dialplan",children:"Dialplan"}),"\n",(0,s.jsx)(t.p,{children:"First, let's make a dialplan extension."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-editorconfig",metastring:'title="extensions.conf"',children:'[speech]                                              ; The context\nexten => 123,1,Answer()                               ; Answer the call\nexten => 123,n,agi(googletts.agi,"${TEXT}","${LANG}") ; Execute the googletts agi script with the TEXT and LANG variables\n'})}),"\n",(0,s.jsx)(t.h2,{id:"service",children:"Service"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-yaml",metastring:'title="Service"',children:"service: asterisk.send_action\ndata:\n  action: Originate\n  parameters:\n    channel: PJSIP/100                          # The device it will call\n    context: speech                             # The context we created in the dialplan\n    exten: 123                                  # The extension inside that context\n    priority: 1                                 # Priority of the call\n    callerid: 'Home Assistant'                  # The callerID it calls as\n    timeout: 60000                              # Time until giving up in ms\n    variable: \"TEXT='Hello world!',LANG=en\"     # Variables that you can use in the dialplan\n"})})]})}function h(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>l});var i=n(6540);const s={},a=i.createContext(s);function o(e){const t=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),i.createElement(a.Provider,{value:t},e.children)}}}]);