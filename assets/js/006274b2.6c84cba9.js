"use strict";(self.webpackChunksip_hass_docs=self.webpackChunksip_hass_docs||[]).push([[4634],{1346:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>c,default:()=>d,frontMatter:()=>a,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"developers/card/guides/popup","title":"Custom Popup","description":"This guide will help you create a custom popup that can be used by SIP Core. This popup will interact with the SIP Core instance and provide basic functionality such as answering & ending calls.","source":"@site/docs/developers/card/guides/popup.md","sourceDirName":"developers/card/guides","slug":"/developers/card/guides/popup","permalink":"/sip-hass-docs/docs/developers/card/guides/popup","draft":false,"unlisted":false,"editUrl":"https://github.com/TECH7Fox/sip-hass-docs/edit/main/docs/developers/card/guides/popup.md","tags":[],"version":"current","frontMatter":{},"sidebar":"developersSidebar","previous":{"title":"Guides","permalink":"/sip-hass-docs/docs/developers/card/guides"},"next":{"title":"Simple Card","permalink":"/sip-hass-docs/docs/developers/card/guides/standalone"}}');var i=t(4848),s=t(8453);const a={},c="Custom Popup",r={},l=[{value:"Step 1: Create the Popup",id:"step-1-create-the-popup",level:2},{value:"Step 2: Load the Popup in Home Assistant",id:"step-2-load-the-popup-in-home-assistant",level:2},{value:"Step 3: Configure SIP Core to Use the Popup Element",id:"step-3-configure-sip-core-to-use-the-popup-element",level:2}];function p(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",img:"img",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...e.components},{Details:o}=n;return o||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"custom-popup",children:"Custom Popup"})}),"\n",(0,i.jsx)(n.p,{children:"This guide will help you create a custom popup that can be used by SIP Core. This popup will interact with the SIP Core instance and provide basic functionality such as answering & ending calls."}),"\n",(0,i.jsx)(n.admonition,{type:"warning",children:(0,i.jsxs)(n.p,{children:["For this guide we expect you to have ",(0,i.jsx)(n.strong,{children:"sip-hass-card"})," already installed, configured and running in your Home Assistant instance. If you haven't done that yet, please refer to the ",(0,i.jsx)(n.a,{href:"/sip-hass-docs/docs/tutorial/introduction",children:"Installation Guide"})," to set it up."]})}),"\n",(0,i.jsx)(n.h2,{id:"step-1-create-the-popup",children:"Step 1: Create the Popup"}),"\n",(0,i.jsxs)(n.p,{children:["Create a new file named ",(0,i.jsx)(n.code,{children:"sip-example-popup.js"})," in your project directory. This file will contain the code for your standalone popup. Here is a basic example:"]}),"\n",(0,i.jsxs)(o,{children:[(0,i.jsx)("summary",{children:"Example Popup"}),(0,i.jsx)(n.p,{children:"This example shows how to create a standalone popup that can be used by SIP Core. It includes basic functionality to interact with the SIP Core instance."}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'import {\n    LitElement,\n    html,\n    css,\n} from "https://cdn.jsdelivr.net/npm/lit-element@4.2.0/+esm";\n\n\nclass SIPExampleDialog extends LitElement {\n    sipCore;\n    open = false;\n    hass = sipCore.hass;\n    config = sipCore.config.popup_config;\n\n    constructor() {\n        super();\n        this.setupButton();\n\n        // bind openPopup and closePopup to this instance\n        this.openPopup = this.openPopup.bind(this);\n        this.closePopup = this.closePopup.bind(this);\n    }\n\n    static get styles() {\n        return css`\n        ha-icon[slot="meta"] {\n            width: 18px;\n            height: 18px;\n        }\n\n        ha-icon {\n            display: flex;\n            align-items: center;\n            justify-content: center;\n        }\n\n        ha-dialog {\n            --dialog-content-padding: 0;\n            --mdc-dialog-min-width: 600px;\n        }\n\n        @media (max-width: 600px), (max-height: 600px) {\n            ha-dialog {\n                --dialog-surface-margin-top: 0px;\n                --mdc-dialog-min-width: calc( 100vw - env(safe-area-inset-right) - env(safe-area-inset-left) );\n                --mdc-dialog-max-width: calc( 100vw - env(safe-area-inset-right) - env(safe-area-inset-left) );\n                --mdc-dialog-min-height: 100%;\n                --mdc-dialog-max-height: 100%;\n                --vertical-align-dialog: flex-end;\n                --ha-dialog-border-radius: 0;\n            }\n        }\n\n        .accept-button {\n            color: var(--label-badge-green);\n        }\n\n        .deny-button {\n            color: var(--label-badge-red);\n        }\n\n        .deny-button, .accept-button, .audio-button {\n            --mdc-icon-button-size: 64px;\n            --mdc-icon-size: 32px;\n        }\n\n        .row {\n            display: flex;\n            flex-direction: row;\n            justify-content: space-between;\n        }\n\n        .bottom-row {\n            display: flex;\n            justify-content: space-between;\n            padding: 12px 16px;\n            border-top: 1px solid var(--divider-color);\n        }\n\n        .content {\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            min-height: 300px;\n            width: 100%;\n        }\n\n        .form {\n            display: flex;\n            flex-direction: column;\n            padding: 16px;\n        }\n\n        ha-select {\n            margin: 8px 0;\n        }\n        `;\n    }\n\n    updateHandler = (event) => {\n        if (!this.sipCore) {\n            this.sipCore = window.sipCore;\n        }\n        this.requestUpdate();\n    }\n\n    connectedCallback() {\n        super.connectedCallback();\n        window.addEventListener(\'sipcore-update\', this.updateHandler);\n        window.addEventListener(\'sipcore-call-started\', this.openPopup);\n        window.addEventListener(\'sipcore-call-ended\', this.closePopup);\n    }\n\n    disconnectedCallback() {\n        super.disconnectedCallback();\n        window.removeEventListener(\'sipcore-update\', this.updateHandler);\n        window.removeEventListener(\'sipcore-call-started\', this.openPopup);\n        window.removeEventListener(\'sipcore-call-ended\', this.closePopup);\n    }\n\n    openPopup() {\n        this.open = true;\n        this.requestUpdate();\n    }\n\n    closePopup() {\n        this.open = false;\n        this.requestUpdate();\n    }\n\n    render() {\n        if (!this.sipCore) {\n            return html`<div>Loading...</div>`;\n        }\n\n        return html`\n        <ha-dialog ?open=${this.open} @closed=${this.closePopup} hideActions flexContent .heading=${true} data-domain="camera">\n        <ha-dialog-header slot="heading">\n        <ha-icon-button\n        dialogAction="cancel"\n        slot="navigationIcon"\n        label="Close">\n        <ha-icon .icon=${"mdi:close"}></ha-icon>\n        </ha-icon-button>\n        <div slot="title" class="row">\n        <span>Custom call dialog</span>\n        <span style="color: gray;">${this.sipCore.callDuration}</span>\n        </div>\n        </ha-dialog-header>\n        <div tabindex="-1" dialogInitialFocus>\n        <div class="content">\n        ${this.sipCore.callState}\n        <br>\n        ${this.sipCore.remoteName}\n        <br>\n        ${this.sipCore.remoteExtension}\n        <br>\n        ${this.config.test_value}\n        </div>\n        <div class="bottom-row">\n        <ha-icon-button\n        class="accept-button"\n        label="Answer call"\n        @click="${() => this.sipCore.answerCall()}">\n        <ha-icon .icon=${"mdi:phone"}></ha-icon>\n        </ha-icon-button>\n        <ha-icon-button\n        class="deny-button"\n        label="End call"\n        @click="${() => {\n            this.sipCore.endCall();\n            this.closePopup();\n        }}">\n        <ha-icon .icon=${"mdi:phone-off"}></ha-icon>\n        </ha-icon-button>\n        </div>\n        </div>\n        </ha-dialog>\n        `;\n    }\n\n    setupButton() {\n        const homeAssistant = document.getElementsByTagName("home-assistant")[0];\n        const panel = homeAssistant?.shadowRoot?.querySelector("home-assistant-main")\n        ?.shadowRoot?.querySelector("ha-panel-lovelace");\n\n        if (panel === null) {\n            console.debug("panel not found!");\n            return;\n        }\n\n        const actionItems = panel?.shadowRoot?.querySelector("hui-root")?.shadowRoot?.querySelector(".action-items");\n\n        if (actionItems?.querySelector("#sipcore-call-button")) {\n            return;\n        }\n\n        const callButton = document.createElement("ha-icon-button");\n        callButton.label = "Open Call Popup";\n        const icon = document.createElement("ha-icon");\n        icon.style = "display: flex; align-items: center; justify-content: center;";\n        icon.icon = "mdi:phone";\n        callButton.slot = "actionItems";\n        callButton.id = "sipcore-call-button";\n        callButton.appendChild(icon);\n        callButton.addEventListener("click", () => {\n            this.open = true;\n            this.requestUpdate();\n        });\n        actionItems?.appendChild(callButton);\n\n        window.addEventListener("location-changed", () => {\n            console.debug("View changed, setting up button again...");\n            this.setupButton();\n        })\n    }\n}\n\ncustomElements.define("custom-call-dialog", SIPExampleDialog);\n'})})]}),"\n",(0,i.jsx)(n.h2,{id:"step-2-load-the-popup-in-home-assistant",children:"Step 2: Load the Popup in Home Assistant"}),"\n",(0,i.jsxs)(n.p,{children:["To import this card into Home Assistant, copy the file to your ",(0,i.jsx)(n.code,{children:"config/www"}),' directory of your Home Assistant installation. Then, go to settings > dashboards, click on the three dots in the top right corner, and select "Resources". Click on "Add Resource" and enter the path to your popup file, like ',(0,i.jsx)(n.code,{children:"/local/sip-example-popup.js"}),'.\nMake sure to set the resource type to "JavaScript Module", and then click "Create".']}),"\n",(0,i.jsx)(n.h2,{id:"step-3-configure-sip-core-to-use-the-popup-element",children:"Step 3: Configure SIP Core to Use the Popup Element"}),"\n",(0,i.jsxs)(n.p,{children:["To use your custom popup, you need to configure SIP Core to recognize it. Open your ",(0,i.jsx)(n.code,{children:"sip-config.json"})," file and set the following configuration:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n    "popup_override_component": "custom-call-dialog",\n    "popup_config": {\n        "test_value": "This is a test value"\n    },\n    ... rest of your configuration ...\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"This tells SIP Core to use your custom popup component instead of the default one."}),"\n",(0,i.jsxs)(n.p,{children:["Also, SIP Core tries to put the ",(0,i.jsx)(n.code,{children:"popup_config"})," object in your component ",(0,i.jsx)(n.code,{children:"config"})," property, so you can access it in your popup. In this example, we added a ",(0,i.jsx)(n.code,{children:"test_value"})," property to demonstrate how to use it."]}),"\n",(0,i.jsxs)(n.p,{children:["Now after saving the configuration and reloading with ",(0,i.jsx)("kbd",{children:"Ctrl"})," + ",(0,i.jsx)("kbd",{children:"Shift"})," + ",(0,i.jsx)("kbd",{children:"R"}),", you should be able to see your custom popup in action when you click on the call button in the toolbar or when a call is received."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"working custom popup",src:t(9688).A+"",width:"944",height:"733"})}),"\n",(0,i.jsx)(n.admonition,{type:"warning",children:(0,i.jsxs)(n.p,{children:["If it is not working for you, check the browser console (F12) for any errors, and make sure it reloaded correctly. You can also try reloading the page with ",(0,i.jsx)("kbd",{children:"Ctrl"})," + ",(0,i.jsx)("kbd",{children:"Shift"})," + ",(0,i.jsx)("kbd",{children:"R"})," to force a full reload of HA."]})}),"\n",(0,i.jsxs)(n.p,{children:["To share your popup with others, you can upload it to a Github repository and use ",(0,i.jsx)(n.a,{href:"https://www.hacs.xyz/docs/publish/plugin/",children:"HACS"})," to make it available for others to install and update easily."]}),"\n",(0,i.jsxs)(n.p,{children:["And please share your popup in our ",(0,i.jsx)(n.a,{href:"https://discordapp.com/invite/qxnDtHbwuD",children:"Discord server"})," or on the ",(0,i.jsx)(n.a,{href:"https://community.home-assistant.io/",children:"Home Assistant Forum"}),". Would love to see your creations!"]})]})}function d(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(p,{...e})}):p(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>c});var o=t(6540);const i={},s=o.createContext(i);function a(e){const n=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),o.createElement(s.Provider,{value:n},e.children)}},9688:(e,n,t)=>{t.d(n,{A:()=>o});const o=t.p+"assets/images/image-857021e64c59e6f2a08bc82d38f00526.png"}}]);